// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module synth_tb_synth_tb_Pipeline_fill_unsorted (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_myarr_AWVALID,
        m_axi_myarr_AWREADY,
        m_axi_myarr_AWADDR,
        m_axi_myarr_AWID,
        m_axi_myarr_AWLEN,
        m_axi_myarr_AWSIZE,
        m_axi_myarr_AWBURST,
        m_axi_myarr_AWLOCK,
        m_axi_myarr_AWCACHE,
        m_axi_myarr_AWPROT,
        m_axi_myarr_AWQOS,
        m_axi_myarr_AWREGION,
        m_axi_myarr_AWUSER,
        m_axi_myarr_WVALID,
        m_axi_myarr_WREADY,
        m_axi_myarr_WDATA,
        m_axi_myarr_WSTRB,
        m_axi_myarr_WLAST,
        m_axi_myarr_WID,
        m_axi_myarr_WUSER,
        m_axi_myarr_ARVALID,
        m_axi_myarr_ARREADY,
        m_axi_myarr_ARADDR,
        m_axi_myarr_ARID,
        m_axi_myarr_ARLEN,
        m_axi_myarr_ARSIZE,
        m_axi_myarr_ARBURST,
        m_axi_myarr_ARLOCK,
        m_axi_myarr_ARCACHE,
        m_axi_myarr_ARPROT,
        m_axi_myarr_ARQOS,
        m_axi_myarr_ARREGION,
        m_axi_myarr_ARUSER,
        m_axi_myarr_RVALID,
        m_axi_myarr_RREADY,
        m_axi_myarr_RDATA,
        m_axi_myarr_RLAST,
        m_axi_myarr_RID,
        m_axi_myarr_RFIFONUM,
        m_axi_myarr_RUSER,
        m_axi_myarr_RRESP,
        m_axi_myarr_BVALID,
        m_axi_myarr_BREADY,
        m_axi_myarr_BRESP,
        m_axi_myarr_BID,
        m_axi_myarr_BUSER
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_myarr_AWVALID;
input   m_axi_myarr_AWREADY;
output  [31:0] m_axi_myarr_AWADDR;
output  [0:0] m_axi_myarr_AWID;
output  [31:0] m_axi_myarr_AWLEN;
output  [2:0] m_axi_myarr_AWSIZE;
output  [1:0] m_axi_myarr_AWBURST;
output  [1:0] m_axi_myarr_AWLOCK;
output  [3:0] m_axi_myarr_AWCACHE;
output  [2:0] m_axi_myarr_AWPROT;
output  [3:0] m_axi_myarr_AWQOS;
output  [3:0] m_axi_myarr_AWREGION;
output  [0:0] m_axi_myarr_AWUSER;
output   m_axi_myarr_WVALID;
input   m_axi_myarr_WREADY;
output  [31:0] m_axi_myarr_WDATA;
output  [3:0] m_axi_myarr_WSTRB;
output   m_axi_myarr_WLAST;
output  [0:0] m_axi_myarr_WID;
output  [0:0] m_axi_myarr_WUSER;
output   m_axi_myarr_ARVALID;
input   m_axi_myarr_ARREADY;
output  [31:0] m_axi_myarr_ARADDR;
output  [0:0] m_axi_myarr_ARID;
output  [31:0] m_axi_myarr_ARLEN;
output  [2:0] m_axi_myarr_ARSIZE;
output  [1:0] m_axi_myarr_ARBURST;
output  [1:0] m_axi_myarr_ARLOCK;
output  [3:0] m_axi_myarr_ARCACHE;
output  [2:0] m_axi_myarr_ARPROT;
output  [3:0] m_axi_myarr_ARQOS;
output  [3:0] m_axi_myarr_ARREGION;
output  [0:0] m_axi_myarr_ARUSER;
input   m_axi_myarr_RVALID;
output   m_axi_myarr_RREADY;
input  [31:0] m_axi_myarr_RDATA;
input   m_axi_myarr_RLAST;
input  [0:0] m_axi_myarr_RID;
input  [8:0] m_axi_myarr_RFIFONUM;
input  [0:0] m_axi_myarr_RUSER;
input  [1:0] m_axi_myarr_RRESP;
input   m_axi_myarr_BVALID;
output   m_axi_myarr_BREADY;
input  [1:0] m_axi_myarr_BRESP;
input  [0:0] m_axi_myarr_BID;
input  [0:0] m_axi_myarr_BUSER;

reg ap_idle;
reg m_axi_myarr_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln11_fu_67_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    myarr_blk_n_W;
wire    ap_block_pp0_stage0;
wire   [6:0] sub_ln12_fu_79_p2;
reg   [6:0] sub_ln12_reg_104;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0_01001;
reg   [6:0] i_fu_46;
wire   [6:0] add_ln11_fu_73_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

synth_tb_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln11_fu_67_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_46 <= add_ln11_fu_73_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_46 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_67_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln12_reg_104 <= sub_ln12_fu_79_p2;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_67_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_myarr_WVALID = 1'b1;
    end else begin
        m_axi_myarr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        myarr_blk_n_W = m_axi_myarr_WREADY;
    end else begin
        myarr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_73_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_myarr_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_myarr_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln11_fu_67_p2 = ((ap_sig_allocacmp_i_1 == 7'd100) ? 1'b1 : 1'b0);

assign m_axi_myarr_ARADDR = 32'd0;

assign m_axi_myarr_ARBURST = 2'd0;

assign m_axi_myarr_ARCACHE = 4'd0;

assign m_axi_myarr_ARID = 1'd0;

assign m_axi_myarr_ARLEN = 32'd0;

assign m_axi_myarr_ARLOCK = 2'd0;

assign m_axi_myarr_ARPROT = 3'd0;

assign m_axi_myarr_ARQOS = 4'd0;

assign m_axi_myarr_ARREGION = 4'd0;

assign m_axi_myarr_ARSIZE = 3'd0;

assign m_axi_myarr_ARUSER = 1'd0;

assign m_axi_myarr_ARVALID = 1'b0;

assign m_axi_myarr_AWADDR = 32'd0;

assign m_axi_myarr_AWBURST = 2'd0;

assign m_axi_myarr_AWCACHE = 4'd0;

assign m_axi_myarr_AWID = 1'd0;

assign m_axi_myarr_AWLEN = 32'd0;

assign m_axi_myarr_AWLOCK = 2'd0;

assign m_axi_myarr_AWPROT = 3'd0;

assign m_axi_myarr_AWQOS = 4'd0;

assign m_axi_myarr_AWREGION = 4'd0;

assign m_axi_myarr_AWSIZE = 3'd0;

assign m_axi_myarr_AWUSER = 1'd0;

assign m_axi_myarr_AWVALID = 1'b0;

assign m_axi_myarr_BREADY = 1'b0;

assign m_axi_myarr_RREADY = 1'b0;

assign m_axi_myarr_WDATA = sub_ln12_reg_104;

assign m_axi_myarr_WID = 1'd0;

assign m_axi_myarr_WLAST = 1'b0;

assign m_axi_myarr_WSTRB = 4'd15;

assign m_axi_myarr_WUSER = 1'd0;

assign sub_ln12_fu_79_p2 = ($signed(7'd99) - $signed(ap_sig_allocacmp_i_1));

endmodule //synth_tb_synth_tb_Pipeline_fill_unsorted
