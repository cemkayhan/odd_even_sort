-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity synth_tb_synth_tb_Pipeline_for_odd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_myarr_AWVALID : OUT STD_LOGIC;
    m_axi_myarr_AWREADY : IN STD_LOGIC;
    m_axi_myarr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_myarr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_myarr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_myarr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_myarr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_myarr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_myarr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_myarr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_myarr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_myarr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_myarr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_myarr_WVALID : OUT STD_LOGIC;
    m_axi_myarr_WREADY : IN STD_LOGIC;
    m_axi_myarr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_myarr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_myarr_WLAST : OUT STD_LOGIC;
    m_axi_myarr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_myarr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_myarr_ARVALID : OUT STD_LOGIC;
    m_axi_myarr_ARREADY : IN STD_LOGIC;
    m_axi_myarr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_myarr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_myarr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_myarr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_myarr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_myarr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_myarr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_myarr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_myarr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_myarr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_myarr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_myarr_RVALID : IN STD_LOGIC;
    m_axi_myarr_RREADY : OUT STD_LOGIC;
    m_axi_myarr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_myarr_RLAST : IN STD_LOGIC;
    m_axi_myarr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_myarr_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_myarr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_myarr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_myarr_BVALID : IN STD_LOGIC;
    m_axi_myarr_BREADY : OUT STD_LOGIC;
    m_axi_myarr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_myarr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_myarr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    add_ln16_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    and_ln : IN STD_LOGIC_VECTOR (31 downto 0);
    is_sorted_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    is_sorted_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of synth_tb_synth_tb_Pipeline_for_odd is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal icmp_ln22_reg_242 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_itr1_reg_132 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op42_readreq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal myarr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal myarr_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal myarr_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal icmp_ln25_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal myarr_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal myarr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln22_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln54_fu_169_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln54_reg_246 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal myarr_addr_read_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal myarr_addr_read_1_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal icmp_ln25_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_predicate_op59_writereq_state13 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal or_ln54_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_predicate_op60_write_state14 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_pp0_stage13_01001 : BOOLEAN;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_predicate_op61_write_state15 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_pp0_stage14_01001 : BOOLEAN;
    signal indvar_fu_70 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_fu_163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal is_sorted_fu_74 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal shl_ln_fu_189_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_528 : BOOLEAN;
    signal ap_condition_532 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component synth_tb_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component synth_tb_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    first_itr1_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_itr1_reg_132 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln22_reg_242 = ap_const_lv1_0))) then 
                first_itr1_reg_132 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_fu_70 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln22_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_fu_70 <= add_ln22_fu_163_p2;
            end if; 
        end if;
    end process;

    is_sorted_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                is_sorted_fu_74 <= ap_const_lv1_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln25_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                is_sorted_fu_74 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln22_reg_242 <= icmp_ln22_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (icmp_ln22_reg_242 = ap_const_lv1_0))) then
                icmp_ln25_reg_269 <= icmp_ln25_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln22_reg_242 = ap_const_lv1_0))) then
                myarr_addr_read_1_reg_263 <= m_axi_myarr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln22_reg_242 = ap_const_lv1_0))) then
                myarr_addr_read_reg_257 <= m_axi_myarr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                trunc_ln54_reg_246 <= trunc_ln54_fu_169_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter0_stage2, ap_block_pp0_stage17_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln22_fu_163_p2 <= std_logic_vector(unsigned(indvar_fu_70) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_myarr_RVALID, icmp_ln22_reg_242)
    begin
                ap_block_pp0_stage10_11001 <= ((m_axi_myarr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_myarr_RVALID, icmp_ln22_reg_242)
    begin
                ap_block_pp0_stage10_subdone <= ((m_axi_myarr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state13_io)
    begin
                ap_block_pp0_stage12_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io));
    end process;


    ap_block_pp0_stage12_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state13_io)
    begin
                ap_block_pp0_stage12_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io));
    end process;

        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state14_io)
    begin
                ap_block_pp0_stage13_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_io));
    end process;


    ap_block_pp0_stage13_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state14_io)
    begin
                ap_block_pp0_stage13_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_io));
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state15_io)
    begin
                ap_block_pp0_stage14_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io));
    end process;


    ap_block_pp0_stage14_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state15_io)
    begin
                ap_block_pp0_stage14_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io));
    end process;

        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_myarr_BVALID, icmp_ln25_reg_269)
    begin
                ap_block_pp0_stage1_11001 <= ((m_axi_myarr_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln25_reg_269 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_myarr_BVALID, icmp_ln25_reg_269)
    begin
                ap_block_pp0_stage1_subdone <= ((m_axi_myarr_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln25_reg_269 = ap_const_lv1_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;

        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_myarr_RVALID, icmp_ln22_reg_242)
    begin
                ap_block_pp0_stage9_11001 <= ((m_axi_myarr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_myarr_RVALID, icmp_ln22_reg_242)
    begin
                ap_block_pp0_stage9_subdone <= ((m_axi_myarr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;


    ap_block_state10_pp0_stage9_iter0_assign_proc : process(m_axi_myarr_RVALID, icmp_ln22_reg_242)
    begin
                ap_block_state10_pp0_stage9_iter0 <= ((m_axi_myarr_RVALID = ap_const_logic_0) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;


    ap_block_state11_pp0_stage10_iter0_assign_proc : process(m_axi_myarr_RVALID, icmp_ln22_reg_242)
    begin
                ap_block_state11_pp0_stage10_iter0 <= ((m_axi_myarr_RVALID = ap_const_logic_0) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(m_axi_myarr_AWREADY, ap_predicate_op59_writereq_state13)
    begin
                ap_block_state13_io <= ((m_axi_myarr_AWREADY = ap_const_logic_0) and (ap_predicate_op59_writereq_state13 = ap_const_boolean_1));
    end process;

        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(m_axi_myarr_WREADY, ap_predicate_op60_write_state14)
    begin
                ap_block_state14_io <= ((m_axi_myarr_WREADY = ap_const_logic_0) and (ap_predicate_op60_write_state14 = ap_const_boolean_1));
    end process;

        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(m_axi_myarr_WREADY, ap_predicate_op61_write_state15)
    begin
                ap_block_state15_io <= ((m_axi_myarr_WREADY = ap_const_logic_0) and (ap_predicate_op61_write_state15 = ap_const_boolean_1));
    end process;

        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp0_stage1_iter1_assign_proc : process(m_axi_myarr_BVALID, icmp_ln25_reg_269)
    begin
                ap_block_state20_pp0_stage1_iter1 <= ((m_axi_myarr_BVALID = ap_const_logic_0) and (icmp_ln25_reg_269 = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_myarr_ARREADY, ap_predicate_op42_readreq_state3)
    begin
                ap_block_state3_io <= ((m_axi_myarr_ARREADY = ap_const_logic_0) and (ap_predicate_op42_readreq_state3 = ap_const_boolean_1));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_528_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_predicate_op60_write_state14, ap_block_pp0_stage13_01001)
    begin
                ap_condition_528 <= ((ap_predicate_op60_write_state14 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_01001));
    end process;


    ap_condition_532_assign_proc : process(ap_CS_fsm_pp0_stage14, ap_predicate_op61_write_state15, ap_block_pp0_stage14_01001)
    begin
                ap_condition_532 <= ((ap_predicate_op61_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_01001));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln22_reg_242, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (icmp_ln22_reg_242 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_predicate_op42_readreq_state3_assign_proc : process(icmp_ln22_reg_242, first_itr1_reg_132)
    begin
                ap_predicate_op42_readreq_state3 <= ((first_itr1_reg_132 = ap_const_lv1_1) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;


    ap_predicate_op59_writereq_state13_assign_proc : process(icmp_ln22_reg_242, icmp_ln25_reg_269)
    begin
                ap_predicate_op59_writereq_state13 <= ((icmp_ln25_reg_269 = ap_const_lv1_1) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;


    ap_predicate_op60_write_state14_assign_proc : process(icmp_ln22_reg_242, icmp_ln25_reg_269)
    begin
                ap_predicate_op60_write_state14 <= ((icmp_ln25_reg_269 = ap_const_lv1_1) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;


    ap_predicate_op61_write_state15_assign_proc : process(icmp_ln22_reg_242, icmp_ln25_reg_269)
    begin
                ap_predicate_op61_write_state15 <= ((icmp_ln25_reg_269 = ap_const_lv1_1) and (icmp_ln22_reg_242 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln22_fu_158_p2 <= "1" when (indvar_fu_70 = add_ln16_4) else "0";
    icmp_ln25_fu_185_p2 <= "1" when (signed(myarr_addr_read_reg_257) > signed(myarr_addr_read_1_reg_263)) else "0";
    is_sorted_1_out <= is_sorted_fu_74;

    is_sorted_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln22_reg_242, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln22_reg_242 = ap_const_lv1_1))) then 
            is_sorted_1_out_ap_vld <= ap_const_logic_1;
        else 
            is_sorted_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_myarr_ARADDR <= ap_const_lv32_1;
    m_axi_myarr_ARBURST <= ap_const_lv2_0;
    m_axi_myarr_ARCACHE <= ap_const_lv4_0;
    m_axi_myarr_ARID <= ap_const_lv1_0;
    m_axi_myarr_ARLEN <= and_ln;
    m_axi_myarr_ARLOCK <= ap_const_lv2_0;
    m_axi_myarr_ARPROT <= ap_const_lv3_0;
    m_axi_myarr_ARQOS <= ap_const_lv4_0;
    m_axi_myarr_ARREGION <= ap_const_lv4_0;
    m_axi_myarr_ARSIZE <= ap_const_lv3_0;
    m_axi_myarr_ARUSER <= ap_const_lv1_0;

    m_axi_myarr_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_predicate_op42_readreq_state3, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op42_readreq_state3 = ap_const_boolean_1))) then 
            m_axi_myarr_ARVALID <= ap_const_logic_1;
        else 
            m_axi_myarr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_myarr_AWADDR <= or_ln54_fu_196_p2;
    m_axi_myarr_AWBURST <= ap_const_lv2_0;
    m_axi_myarr_AWCACHE <= ap_const_lv4_0;
    m_axi_myarr_AWID <= ap_const_lv1_0;
    m_axi_myarr_AWLEN <= ap_const_lv32_2;
    m_axi_myarr_AWLOCK <= ap_const_lv2_0;
    m_axi_myarr_AWPROT <= ap_const_lv3_0;
    m_axi_myarr_AWQOS <= ap_const_lv4_0;
    m_axi_myarr_AWREGION <= ap_const_lv4_0;
    m_axi_myarr_AWSIZE <= ap_const_lv3_0;
    m_axi_myarr_AWUSER <= ap_const_lv1_0;

    m_axi_myarr_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage12, ap_predicate_op59_writereq_state13, ap_block_pp0_stage12_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op59_writereq_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001))) then 
            m_axi_myarr_AWVALID <= ap_const_logic_1;
        else 
            m_axi_myarr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_myarr_BREADY_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln25_reg_269, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln25_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_myarr_BREADY <= ap_const_logic_1;
        else 
            m_axi_myarr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_myarr_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln22_reg_242, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln22_reg_242 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln22_reg_242 = ap_const_lv1_0)))) then 
            m_axi_myarr_RREADY <= ap_const_logic_1;
        else 
            m_axi_myarr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_myarr_WDATA_assign_proc : process(ap_enable_reg_pp0_iter0, myarr_addr_read_reg_257, myarr_addr_read_1_reg_263, ap_condition_528, ap_condition_532)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_532)) then 
                m_axi_myarr_WDATA <= myarr_addr_read_reg_257;
            elsif ((ap_const_boolean_1 = ap_condition_528)) then 
                m_axi_myarr_WDATA <= myarr_addr_read_1_reg_263;
            else 
                m_axi_myarr_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_myarr_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_myarr_WID <= ap_const_lv1_0;
    m_axi_myarr_WLAST <= ap_const_logic_0;
    m_axi_myarr_WSTRB <= ap_const_lv4_F;
    m_axi_myarr_WUSER <= ap_const_lv1_0;

    m_axi_myarr_WVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_predicate_op60_write_state14, ap_block_pp0_stage13_11001, ap_predicate_op61_write_state15, ap_block_pp0_stage14_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op61_write_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op60_write_state14 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)))) then 
            m_axi_myarr_WVALID <= ap_const_logic_1;
        else 
            m_axi_myarr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    myarr_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, m_axi_myarr_ARREADY, ap_predicate_op42_readreq_state3, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_predicate_op42_readreq_state3 = ap_const_boolean_1))) then 
            myarr_blk_n_AR <= m_axi_myarr_ARREADY;
        else 
            myarr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    myarr_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_myarr_AWREADY, icmp_ln22_reg_242, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, icmp_ln25_reg_269)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (icmp_ln25_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (icmp_ln22_reg_242 = ap_const_lv1_0))) then 
            myarr_blk_n_AW <= m_axi_myarr_AWREADY;
        else 
            myarr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    myarr_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_myarr_BVALID, icmp_ln25_reg_269, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln25_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            myarr_blk_n_B <= m_axi_myarr_BVALID;
        else 
            myarr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    myarr_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_myarr_RVALID, icmp_ln22_reg_242, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (icmp_ln22_reg_242 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (icmp_ln22_reg_242 = ap_const_lv1_0)))) then 
            myarr_blk_n_R <= m_axi_myarr_RVALID;
        else 
            myarr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    myarr_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_myarr_WREADY, icmp_ln22_reg_242, icmp_ln25_reg_269, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln25_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (icmp_ln22_reg_242 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (icmp_ln25_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (icmp_ln22_reg_242 = ap_const_lv1_0)))) then 
            myarr_blk_n_W <= m_axi_myarr_WREADY;
        else 
            myarr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    or_ln54_fu_196_p2 <= (shl_ln_fu_189_p3 or ap_const_lv32_1);
    shl_ln_fu_189_p3 <= (trunc_ln54_reg_246 & ap_const_lv1_0);
    trunc_ln54_fu_169_p1 <= indvar_fu_70(31 - 1 downto 0);
end behav;
