// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module synth_tb_synth_tb_Pipeline_for_even (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_myarr_AWVALID,
        m_axi_myarr_AWREADY,
        m_axi_myarr_AWADDR,
        m_axi_myarr_AWID,
        m_axi_myarr_AWLEN,
        m_axi_myarr_AWSIZE,
        m_axi_myarr_AWBURST,
        m_axi_myarr_AWLOCK,
        m_axi_myarr_AWCACHE,
        m_axi_myarr_AWPROT,
        m_axi_myarr_AWQOS,
        m_axi_myarr_AWREGION,
        m_axi_myarr_AWUSER,
        m_axi_myarr_WVALID,
        m_axi_myarr_WREADY,
        m_axi_myarr_WDATA,
        m_axi_myarr_WSTRB,
        m_axi_myarr_WLAST,
        m_axi_myarr_WID,
        m_axi_myarr_WUSER,
        m_axi_myarr_ARVALID,
        m_axi_myarr_ARREADY,
        m_axi_myarr_ARADDR,
        m_axi_myarr_ARID,
        m_axi_myarr_ARLEN,
        m_axi_myarr_ARSIZE,
        m_axi_myarr_ARBURST,
        m_axi_myarr_ARLOCK,
        m_axi_myarr_ARCACHE,
        m_axi_myarr_ARPROT,
        m_axi_myarr_ARQOS,
        m_axi_myarr_ARREGION,
        m_axi_myarr_ARUSER,
        m_axi_myarr_RVALID,
        m_axi_myarr_RREADY,
        m_axi_myarr_RDATA,
        m_axi_myarr_RLAST,
        m_axi_myarr_RID,
        m_axi_myarr_RFIFONUM,
        m_axi_myarr_RUSER,
        m_axi_myarr_RRESP,
        m_axi_myarr_BVALID,
        m_axi_myarr_BREADY,
        m_axi_myarr_BRESP,
        m_axi_myarr_BID,
        m_axi_myarr_BUSER,
        is_sorted_2,
        add_ln16_5,
        and_ln1,
        is_sorted_4_out,
        is_sorted_4_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 18'd1;
parameter    ap_ST_fsm_pp0_stage1 = 18'd2;
parameter    ap_ST_fsm_pp0_stage2 = 18'd4;
parameter    ap_ST_fsm_pp0_stage3 = 18'd8;
parameter    ap_ST_fsm_pp0_stage4 = 18'd16;
parameter    ap_ST_fsm_pp0_stage5 = 18'd32;
parameter    ap_ST_fsm_pp0_stage6 = 18'd64;
parameter    ap_ST_fsm_pp0_stage7 = 18'd128;
parameter    ap_ST_fsm_pp0_stage8 = 18'd256;
parameter    ap_ST_fsm_pp0_stage9 = 18'd512;
parameter    ap_ST_fsm_pp0_stage10 = 18'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 18'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 18'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 18'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 18'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 18'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_myarr_AWVALID;
input   m_axi_myarr_AWREADY;
output  [31:0] m_axi_myarr_AWADDR;
output  [0:0] m_axi_myarr_AWID;
output  [31:0] m_axi_myarr_AWLEN;
output  [2:0] m_axi_myarr_AWSIZE;
output  [1:0] m_axi_myarr_AWBURST;
output  [1:0] m_axi_myarr_AWLOCK;
output  [3:0] m_axi_myarr_AWCACHE;
output  [2:0] m_axi_myarr_AWPROT;
output  [3:0] m_axi_myarr_AWQOS;
output  [3:0] m_axi_myarr_AWREGION;
output  [0:0] m_axi_myarr_AWUSER;
output   m_axi_myarr_WVALID;
input   m_axi_myarr_WREADY;
output  [31:0] m_axi_myarr_WDATA;
output  [3:0] m_axi_myarr_WSTRB;
output   m_axi_myarr_WLAST;
output  [0:0] m_axi_myarr_WID;
output  [0:0] m_axi_myarr_WUSER;
output   m_axi_myarr_ARVALID;
input   m_axi_myarr_ARREADY;
output  [31:0] m_axi_myarr_ARADDR;
output  [0:0] m_axi_myarr_ARID;
output  [31:0] m_axi_myarr_ARLEN;
output  [2:0] m_axi_myarr_ARSIZE;
output  [1:0] m_axi_myarr_ARBURST;
output  [1:0] m_axi_myarr_ARLOCK;
output  [3:0] m_axi_myarr_ARCACHE;
output  [2:0] m_axi_myarr_ARPROT;
output  [3:0] m_axi_myarr_ARQOS;
output  [3:0] m_axi_myarr_ARREGION;
output  [0:0] m_axi_myarr_ARUSER;
input   m_axi_myarr_RVALID;
output   m_axi_myarr_RREADY;
input  [31:0] m_axi_myarr_RDATA;
input   m_axi_myarr_RLAST;
input  [0:0] m_axi_myarr_RID;
input  [8:0] m_axi_myarr_RFIFONUM;
input  [0:0] m_axi_myarr_RUSER;
input  [1:0] m_axi_myarr_RRESP;
input   m_axi_myarr_BVALID;
output   m_axi_myarr_BREADY;
input  [1:0] m_axi_myarr_BRESP;
input  [0:0] m_axi_myarr_BID;
input  [0:0] m_axi_myarr_BUSER;
input  [0:0] is_sorted_2;
input  [63:0] add_ln16_5;
input  [31:0] and_ln1;
output  [0:0] is_sorted_4_out;
output   is_sorted_4_out_ap_vld;

reg ap_idle;
reg m_axi_myarr_AWVALID;
reg m_axi_myarr_WVALID;
reg[31:0] m_axi_myarr_WDATA;
reg m_axi_myarr_ARVALID;
reg m_axi_myarr_RREADY;
reg m_axi_myarr_BREADY;
reg is_sorted_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] icmp_ln36_reg_262;
reg    ap_block_state20_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln33_fu_170_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
reg    myarr_blk_n_R;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
reg   [0:0] icmp_ln33_reg_241;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
reg    myarr_blk_n_AR;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] first_itr_reg_144;
reg    myarr_blk_n_AW;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
reg    myarr_blk_n_W;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
reg    myarr_blk_n_B;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state19_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage1_11001;
wire   [30:0] trunc_ln54_fu_181_p1;
reg   [30:0] trunc_ln54_reg_245;
reg   [31:0] myarr_read_reg_250;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
reg   [31:0] myarr_read_1_reg_256;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
wire   [0:0] icmp_ln36_fu_190_p2;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire    ap_block_state13_pp0_stage12_iter0;
reg    ap_predicate_op58_writereq_state13;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage12_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_loop_init;
wire    ap_block_pp0_stage0_subdone;
wire   [31:0] shl_ln54_1_fu_194_p3;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_predicate_op42_readreq_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage2_11001;
wire    ap_block_state14_pp0_stage13_iter0;
reg    ap_predicate_op59_write_state14;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage13_11001;
wire    ap_block_pp0_stage13_01001;
wire    ap_block_state15_pp0_stage14_iter0;
reg    ap_predicate_op60_write_state15;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage14_11001;
wire    ap_block_pp0_stage14_01001;
reg   [63:0] indvar47_fu_74;
wire   [63:0] add_ln33_fu_175_p2;
reg   [0:0] is_sorted_fu_78;
reg    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage11;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [17:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage2_subdone;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_522;
reg    ap_condition_526;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

synth_tb_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_itr_reg_144 <= 1'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        first_itr_reg_144 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar47_fu_74 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar47_fu_74 <= add_ln33_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        is_sorted_fu_78 <= is_sorted_2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln36_reg_262 == 1'd1))) begin
        is_sorted_fu_78 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln33_reg_241 <= icmp_ln33_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        icmp_ln36_reg_262 <= icmp_ln36_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        myarr_read_1_reg_256 <= m_axi_myarr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        myarr_read_reg_250 <= m_axi_myarr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        trunc_ln54_reg_245 <= trunc_ln54_fu_181_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_fu_170_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_fu_170_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        is_sorted_4_out_ap_vld = 1'b1;
    end else begin
        is_sorted_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op42_readreq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        m_axi_myarr_ARVALID = 1'b1;
    end else begin
        m_axi_myarr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op58_writereq_state13 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001))) begin
        m_axi_myarr_AWVALID = 1'b1;
    end else begin
        m_axi_myarr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln36_reg_262 == 1'd1))) begin
        m_axi_myarr_BREADY = 1'b1;
    end else begin
        m_axi_myarr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001)))) begin
        m_axi_myarr_RREADY = 1'b1;
    end else begin
        m_axi_myarr_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_526)) begin
            m_axi_myarr_WDATA = myarr_read_reg_250;
        end else if ((1'b1 == ap_condition_522)) begin
            m_axi_myarr_WDATA = myarr_read_1_reg_256;
        end else begin
            m_axi_myarr_WDATA = 'bx;
        end
    end else begin
        m_axi_myarr_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op60_write_state15 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op59_write_state14 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)))) begin
        m_axi_myarr_WVALID = 1'b1;
    end else begin
        m_axi_myarr_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (first_itr_reg_144 == 1'd1) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage2))) begin
        myarr_blk_n_AR = m_axi_myarr_ARREADY;
    end else begin
        myarr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage12) & (icmp_ln36_reg_262 == 1'd1))) begin
        myarr_blk_n_AW = m_axi_myarr_AWREADY;
    end else begin
        myarr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln36_reg_262 == 1'd1))) begin
        myarr_blk_n_B = m_axi_myarr_BVALID;
    end else begin
        myarr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage9)))) begin
        myarr_blk_n_R = m_axi_myarr_RVALID;
    end else begin
        myarr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage14) & (icmp_ln36_reg_262 == 1'd1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (icmp_ln33_reg_241 == 1'd0) & (1'b0 == ap_block_pp0_stage13) & (icmp_ln36_reg_262 == 1'd1)))) begin
        myarr_blk_n_W = m_axi_myarr_WREADY;
    end else begin
        myarr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_fu_175_p2 = (indvar47_fu_74 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((m_axi_myarr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_reg_241 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((m_axi_myarr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_reg_241 == 1'd0));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((m_axi_myarr_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln36_reg_262 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_myarr_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln36_reg_262 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_myarr_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln36_reg_262 == 1'd1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((m_axi_myarr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_reg_241 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((m_axi_myarr_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_reg_241 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((m_axi_myarr_RVALID == 1'b0) & (icmp_ln33_reg_241 == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = ((m_axi_myarr_RVALID == 1'b0) & (icmp_ln33_reg_241 == 1'd0));
end

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((m_axi_myarr_AWREADY == 1'b0) & (ap_predicate_op58_writereq_state13 == 1'b1));
end

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((m_axi_myarr_WREADY == 1'b0) & (ap_predicate_op59_write_state14 == 1'b1));
end

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((m_axi_myarr_WREADY == 1'b0) & (ap_predicate_op60_write_state15 == 1'b1));
end

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage1_iter1 = ((m_axi_myarr_BVALID == 1'b0) & (icmp_ln36_reg_262 == 1'd1));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_myarr_ARREADY == 1'b0) & (ap_predicate_op42_readreq_state3 == 1'b1));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_522 = ((ap_predicate_op59_write_state14 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_01001));
end

always @ (*) begin
    ap_condition_526 = ((ap_predicate_op60_write_state15 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op42_readreq_state3 = ((first_itr_reg_144 == 1'd1) & (icmp_ln33_reg_241 == 1'd0));
end

always @ (*) begin
    ap_predicate_op58_writereq_state13 = ((icmp_ln33_reg_241 == 1'd0) & (icmp_ln36_reg_262 == 1'd1));
end

always @ (*) begin
    ap_predicate_op59_write_state14 = ((icmp_ln33_reg_241 == 1'd0) & (icmp_ln36_reg_262 == 1'd1));
end

always @ (*) begin
    ap_predicate_op60_write_state15 = ((icmp_ln33_reg_241 == 1'd0) & (icmp_ln36_reg_262 == 1'd1));
end

assign icmp_ln33_fu_170_p2 = ((indvar47_fu_74 == add_ln16_5) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_190_p2 = (($signed(myarr_read_reg_250) > $signed(myarr_read_1_reg_256)) ? 1'b1 : 1'b0);

assign is_sorted_4_out = is_sorted_fu_78;

assign m_axi_myarr_ARADDR = 32'd0;

assign m_axi_myarr_ARBURST = 2'd0;

assign m_axi_myarr_ARCACHE = 4'd0;

assign m_axi_myarr_ARID = 1'd0;

assign m_axi_myarr_ARLEN = and_ln1;

assign m_axi_myarr_ARLOCK = 2'd0;

assign m_axi_myarr_ARPROT = 3'd0;

assign m_axi_myarr_ARQOS = 4'd0;

assign m_axi_myarr_ARREGION = 4'd0;

assign m_axi_myarr_ARSIZE = 3'd0;

assign m_axi_myarr_ARUSER = 1'd0;

assign m_axi_myarr_AWADDR = shl_ln54_1_fu_194_p3;

assign m_axi_myarr_AWBURST = 2'd0;

assign m_axi_myarr_AWCACHE = 4'd0;

assign m_axi_myarr_AWID = 1'd0;

assign m_axi_myarr_AWLEN = 32'd2;

assign m_axi_myarr_AWLOCK = 2'd0;

assign m_axi_myarr_AWPROT = 3'd0;

assign m_axi_myarr_AWQOS = 4'd0;

assign m_axi_myarr_AWREGION = 4'd0;

assign m_axi_myarr_AWSIZE = 3'd0;

assign m_axi_myarr_AWUSER = 1'd0;

assign m_axi_myarr_WID = 1'd0;

assign m_axi_myarr_WLAST = 1'b0;

assign m_axi_myarr_WSTRB = 4'd15;

assign m_axi_myarr_WUSER = 1'd0;

assign shl_ln54_1_fu_194_p3 = {{trunc_ln54_reg_245}, {1'd0}};

assign trunc_ln54_fu_181_p1 = indvar47_fu_74[30:0];

endmodule //synth_tb_synth_tb_Pipeline_for_even
